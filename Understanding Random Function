
# Pseudo code

# Hangman Steps

# 1. Get the ASCII ART for Hangman (complete)

# 2. Make a word bank
chosen_word = ["Sherrard", "Tiera", "Kai", "Kairo", "Kaila", "Kailee"]
#
# 3. Make word bank random
# random.shuffle function randomly shuffles list by modifying the original list.
random.shuffle(chosen_word)
print(chosen_word)

# random.sample function randomly shuffles list by creating a new list and keep original list intact
shuffled_word = random.sample(chosen_word, len(chosen_word))
print(shuffled_word)

# random.shuffle() and random.sample() both use permutation to randomize objects in python.
# permutation is the arrangement of items in a specific order

# Example 1: Permutations of 3 Items
# Items: [A, B, C]
#
# Possible arrangements (permutations):
#
# [A, B, C]
#
# [A, C, B]
#
# [B, A, C]
#
# [B, C, A]
#
# [C, A, B]
#
# [C, B, A]
#
# 3!=3×2×1=6.

# 22APR2025
# Hangman steps:
# 1. Make a word bank that randomly selects a word

# word_bank = ["apple", "pear", "melon"]
# 
# chosen_word = random.choice(word_bank)
# 
# print(chosen_word)

# Random options
# random.shuffle() shuffles list in place and modifies original list. Can not be assigned variable to prevent confusion.
# Developers might expect a new list if assign to a variable.
# import random
#
# my_list = [1, 2, 3, 4]
# random.shuffle(my_list)  # Modifies my_list directly
# print(my_list)  # Shuffled output, e.g., [4, 1, 3, 2]


# random.sample() creates a new random list and keeps the original list intact:
# import random
# original_list = [1, 2, 3, 4]
# shuffled_list = random.sample(original_list, len(original_list))  # Returns a new shuffled list
#
# print(original_list)  # Unchanged
# print(shuffled_list)  # New shuffled list


# Random.choice picks an item from the list
# import random
# word_bank = ["apple", "pear", "melon"]
# 
# chosen_word = random.choice(word_bank)
# 
# print(chosen_word)
